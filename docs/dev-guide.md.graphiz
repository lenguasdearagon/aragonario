<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
**Table of Contents**

- [about git repository clone](#about-git-repository-clone)
- [generic tool](#generic-tool)
- [tool for data-import](#tool-for-data-import)

<!-- END doctoc generated TOC please keep comment here to allow auto update -->

# about git repository clone

to fetch the source code of backend use

    git clone https://gitlab.com/linguatec/linguatec-lexicon.git

or

    git@gitlab.com:linguatec/linguatec-lexicon.git

You have to know that this repository uses `git lfs`. [Git LFS](https://git-lfs.github.com/) is the tool intended to manage large files in git repositories such as audio samples, videos, datasets, and graphics. If you just `git clone` (without `apt install git-lfs`) you are going to be missing [this kind of files](../.gitattributes). Hence, in a simple usage, you just need to install it and address file targets through `.gitattributes`; the rest is using the common git operations.

If you have git lfs installed and you don't want to download media files do it like: `GIT_LFS_SKIP_SMUDGE=1 git clone (...)` src https://github.com/git-lfs/git-lfs/issues/2406

# graphviz
Tool to generate models diagram

Install requirements
```bash
apt-get install graphviz
sudo apt-get install graphviz libgraphviz-dev pkg-config
source venv/bin/activate
pip install pygraphviz
```

Run it
```bash
python manage.py  graph_models linguatec_lexicon -a -g -o my_project_visualized.png
```

# generic tool

When I reach errors I like to do this kind of breakpoint:

    import code; code.interact(local=dict(globals(), **locals()));exit() # src https://gist.github.com/obfusk/208597ccc64bf9b436ed

that helps to try things interactively taking in account the current variables in use

# tool for data-import

to do fast iterations about the process of data-import first of all I place to

```
path/to/mysite/
```

activate.sh, that I execute as `. activate.sh`, with:

```
#!/bin/bash
source ../env/bin/activate
```

Each modification and change you want to try on data-import script, do `./cycle.sh`, that have these lines:

```
#!/bin/bash
python3 manage.py flush --noinput
echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')" | python3 manage.py shell
python3 manage.py data-import
```
